/*
 * Copyright 2016-2019 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope core
{
    scope control
    {
        enum Role
        {
            SERVER,
            CLIENT,
            PROXY,
            SERVER_REVERSE,
            CLIENT_REVERSE
        }

        enum Capability
        {
            CHALLENGE
        }

        struct Command
        {
            int64 correlationId;
            string nukleus;
        }

        struct Response
        {
            int64 correlationId;
        }

        struct Error extends core::control::Response [0x40000000]
        {
        }

        struct Route extends core::control::Command [0x00000001]
        {
            core::control::Role role;
            int64 authorization = 0;
            string localAddress;
            string remoteAddress;
            octets extension;
        }

        struct Routed extends core::control::Response [0x40000001]
        {
            int64 routeId;
        }

        struct Unroute extends core::control::Command [0x00000002]
        {
            int64 routeId;
        }

        struct Unrouted extends core::control::Response [0x40000002]
        {
        }

        struct Freeze extends core::control::Command [0x00000003]
        {
        }

        struct Frozen extends core::control::Response [0x40000003]
        {
        }

        struct Resolve extends core::control::Command [0x00000011]
        {
            string realm;
            list<string> roles;
            octets extension;
        }

        struct Resolved extends core::control::Response [0x40000011]
        {
            int64 authorization;
        }

        struct Unresolve extends core::control::Command [0x00000012]
        {
            int64 authorization;
        }

        struct Unresolved extends core::control::Response [0x40000012]
        {
        }
    }

    scope stream
    {
        struct Extension
        {
            int32 typeId;
        }

        struct Frame
        {
            int64 routeId;
            int64 streamId;
            int64 timestamp = 0;
            int64 trace = 0;
            int64 authorization = 0;
        }

        struct Begin extends core::stream::Frame [0x00000001]
        {
            int64 affinity = 0;
            octets extension;
        }

        struct Data extends core::stream::Frame [0x00000002]
        {
            uint8 flags = 3;            // 0x02 INIT, 0x01 FIN
            int64 groupId;
            int32 padding;
            int32 length;
            octets[length] payload = null;
            octets extension;
        }

        struct End extends core::stream::Frame [0x00000003]
        {
            octets extension;
        }

        struct Abort extends core::stream::Frame [0x00000004]
        {
            octets extension;
        }

        struct Reset extends core::stream::Frame [0x40000001]
        {
            octets extension;
        }

        struct Window extends core::stream::Frame [0x40000002]
        {
            int32 credit;
            int32 padding;
            int64 groupId;
            uint8 capabilities = 0;
            octets extension;
        }

        struct Signal extends core::stream::Frame [0x40000003]
        {
            int64 signalId;
            octets extension;
        }

        struct Challenge extends core::stream::Frame [0x40000004]
        {
            octets extension;
        }
    }

    scope state
    {
        struct RouteEntry
        {
            uint32 length;
            octets[length] route;
        }

        struct RouteTable
        {
             int32 modificationCount;
             list<core::state::RouteEntry> entries;
        }
    }
}
